package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.ApplicationIndustry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPLICATION_INDUSTRY".
*/
public class ApplicationIndustryDao extends AbstractDao<ApplicationIndustry, String> {

    public static final String TABLENAME = "APPLICATION_INDUSTRY";

    /**
     * Properties of entity ApplicationIndustry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IndustryID = new Property(0, String.class, "IndustryID", true, "INDUSTRY_ID");
        public final static Property ApplicationEng = new Property(1, String.class, "ApplicationEng", false, "APPLICATION_ENG");
        public final static Property ApplicationTC = new Property(2, String.class, "ApplicationTC", false, "APPLICATION_TC");
        public final static Property ApplicationSC = new Property(3, String.class, "ApplicationSC", false, "APPLICATION_SC");
        public final static Property TCStroke = new Property(4, String.class, "TCStroke", false, "TCSTROKE");
        public final static Property SCPY = new Property(5, String.class, "SCPY", false, "SCPY");
    };


    public ApplicationIndustryDao(DaoConfig config) {
        super(config);
    }
    
    public ApplicationIndustryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPLICATION_INDUSTRY\" (" + //
                "\"INDUSTRY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: IndustryID
                "\"APPLICATION_ENG\" TEXT NOT NULL ," + // 1: ApplicationEng
                "\"APPLICATION_TC\" TEXT NOT NULL ," + // 2: ApplicationTC
                "\"APPLICATION_SC\" TEXT NOT NULL ," + // 3: ApplicationSC
                "\"TCSTROKE\" TEXT," + // 4: TCStroke
                "\"SCPY\" TEXT);"); // 5: SCPY
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPLICATION_INDUSTRY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ApplicationIndustry entity) {
        stmt.clearBindings();
 
        String IndustryID = entity.getIndustryID();
        if (IndustryID != null) {
            stmt.bindString(1, IndustryID);
        }
        stmt.bindString(2, entity.getApplicationEng());
        stmt.bindString(3, entity.getApplicationTC());
        stmt.bindString(4, entity.getApplicationSC());
 
        String TCStroke = entity.getTCStroke();
        if (TCStroke != null) {
            stmt.bindString(5, TCStroke);
        }
 
        String SCPY = entity.getSCPY();
        if (SCPY != null) {
            stmt.bindString(6, SCPY);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ApplicationIndustry readEntity(Cursor cursor, int offset) {
        ApplicationIndustry entity = new ApplicationIndustry( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // IndustryID
            cursor.getString(offset + 1), // ApplicationEng
            cursor.getString(offset + 2), // ApplicationTC
            cursor.getString(offset + 3), // ApplicationSC
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TCStroke
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // SCPY
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ApplicationIndustry entity, int offset) {
        entity.setIndustryID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setApplicationEng(cursor.getString(offset + 1));
        entity.setApplicationTC(cursor.getString(offset + 2));
        entity.setApplicationSC(cursor.getString(offset + 3));
        entity.setTCStroke(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSCPY(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ApplicationIndustry entity, long rowId) {
        return entity.getIndustryID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ApplicationIndustry entity) {
        if(entity != null) {
            return entity.getIndustryID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
