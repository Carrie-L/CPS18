package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.ExhibitorUserUpdate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXHIBITOR_USER_UPDATE".
*/
public class ExhibitorUserUpdateDao extends AbstractDao<ExhibitorUserUpdate, String> {

    public static final String TABLENAME = "EXHIBITOR_USER_UPDATE";

    /**
     * Properties of entity ExhibitorUserUpdate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CompanyID = new Property(0, String.class, "CompanyID", true, "COMPANY_ID");
        public final static Property IsFavourite = new Property(1, String.class, "IsFavourite", false, "IS_FAVOURITE");
        public final static Property Note = new Property(2, String.class, "Note", false, "NOTE");
    };


    public ExhibitorUserUpdateDao(DaoConfig config) {
        super(config);
    }
    
    public ExhibitorUserUpdateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXHIBITOR_USER_UPDATE\" (" + //
                "\"COMPANY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: CompanyID
                "\"IS_FAVOURITE\" TEXT," + // 1: IsFavourite
                "\"NOTE\" TEXT);"); // 2: Note
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXHIBITOR_USER_UPDATE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExhibitorUserUpdate entity) {
        stmt.clearBindings();
 
        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(1, CompanyID);
        }
 
        String IsFavourite = entity.getIsFavourite();
        if (IsFavourite != null) {
            stmt.bindString(2, IsFavourite);
        }
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(3, Note);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExhibitorUserUpdate readEntity(Cursor cursor, int offset) {
        ExhibitorUserUpdate entity = new ExhibitorUserUpdate( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CompanyID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // IsFavourite
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // Note
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExhibitorUserUpdate entity, int offset) {
        entity.setCompanyID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsFavourite(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNote(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ExhibitorUserUpdate entity, long rowId) {
        return entity.getCompanyID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ExhibitorUserUpdate entity) {
        if(entity != null) {
            return entity.getCompanyID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
