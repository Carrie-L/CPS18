package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.Hall;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HALL".
*/
public class HallDao extends AbstractDao<Hall, String> {

    public static final String TABLENAME = "HALL";

    /**
     * Properties of entity Hall.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property HallID = new Property(0, String.class, "HallID", true, "HALL_ID");
        public final static Property HallEng = new Property(1, String.class, "HallEng", false, "HALL_ENG");
        public final static Property HallTC = new Property(2, String.class, "HallTC", false, "HALL_TC");
        public final static Property HallSC = new Property(3, String.class, "HallSC", false, "HALL_SC");
        public final static Property SEQ = new Property(4, String.class, "SEQ", false, "SEQ");
    };


    public HallDao(DaoConfig config) {
        super(config);
    }
    
    public HallDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HALL\" (" + //
                "\"HALL_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: HallID
                "\"HALL_ENG\" TEXT," + // 1: HallEng
                "\"HALL_TC\" TEXT," + // 2: HallTC
                "\"HALL_SC\" TEXT," + // 3: HallSC
                "\"SEQ\" TEXT);"); // 4: SEQ
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HALL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Hall entity) {
        stmt.clearBindings();
 
        String HallID = entity.getHallID();
        if (HallID != null) {
            stmt.bindString(1, HallID);
        }
 
        String HallEng = entity.getHallEng();
        if (HallEng != null) {
            stmt.bindString(2, HallEng);
        }
 
        String HallTC = entity.getHallTC();
        if (HallTC != null) {
            stmt.bindString(3, HallTC);
        }
 
        String HallSC = entity.getHallSC();
        if (HallSC != null) {
            stmt.bindString(4, HallSC);
        }
 
        String SEQ = entity.getSEQ();
        if (SEQ != null) {
            stmt.bindString(5, SEQ);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Hall readEntity(Cursor cursor, int offset) {
        Hall entity = new Hall( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // HallID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // HallEng
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // HallTC
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // HallSC
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // SEQ
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Hall entity, int offset) {
        entity.setHallID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHallEng(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHallTC(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHallSC(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSEQ(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Hall entity, long rowId) {
        return entity.getHallID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Hall entity) {
        if(entity != null) {
            return entity.getHallID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
