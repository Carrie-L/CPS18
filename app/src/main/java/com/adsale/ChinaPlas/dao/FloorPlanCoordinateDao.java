package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.FloorPlanCoordinate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "FLOOR_PLAN_COORDINATE".
 */
public class FloorPlanCoordinateDao extends AbstractDao<FloorPlanCoordinate, Void> {

    public static final String TABLENAME = "FLOOR_PLAN_COORDINATE";

    /**
     * Properties of entity FloorPlanCoordinate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ExhibitionId = new Property(0, Integer.class, "ExhibitionId", false, "EXHIBITION_ID");
        public final static Property BoothNum = new Property(1, String.class, "BoothNum", false, "BOOTH_NUM");
        public final static Property Nav = new Property(2, String.class, "Nav", false, "NAV");
        public final static Property Sharp = new Property(3, String.class, "Sharp", false, "SHARP");
        public final static Property SPC = new Property(4, String.class, "SPC", false, "SPC");
        public final static Property Hall = new Property(5, String.class, "Hall", false, "HALL");
        public final static Property Fx = new Property(6, String.class, "Fx", false, "FX");
        public final static Property X1 = new Property(7, Integer.class, "X1", false, "X1");
        public final static Property Y1 = new Property(8, Integer.class, "Y1", false, "Y1");
        public final static Property X2 = new Property(9, Integer.class, "X2", false, "X2");
        public final static Property Y2 = new Property(10, Integer.class, "Y2", false, "Y2");
    };


    public FloorPlanCoordinateDao(DaoConfig config) {
        super(config);
    }

    public FloorPlanCoordinateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FLOOR_PLAN_COORDINATE\" (" + //
                "\"EXHIBITION_ID\" INTEGER," + // 0: ExhibitionId
                "\"BOOTH_NUM\" TEXT," + // 1: BoothNum
                "\"NAV\" TEXT," + // 2: Nav
                "\"SHARP\" TEXT," + // 3: Sharp
                "\"SPC\" TEXT," + // 4: SPC
                "\"HALL\" TEXT," + // 5: Hall
                "\"FX\" TEXT," + // 6: Fx
                "\"X1\" INTEGER," + // 6: X1
                "\"Y1\" INTEGER," + // 7: Y1
                "\"X2\" INTEGER," + // 8: X2
                "\"Y2\" INTEGER);"); // 9: Y2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FLOOR_PLAN_COORDINATE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FloorPlanCoordinate entity) {
        stmt.clearBindings();

        Integer ExhibitionId = entity.getExhibitionId();
        if (ExhibitionId != null) {
            stmt.bindLong(1, ExhibitionId);
        }

        String BoothNum = entity.getBoothNum();
        if (BoothNum != null) {
            stmt.bindString(2, BoothNum);
        }

        String Nav = entity.getNav();
        if (Nav != null) {
            stmt.bindString(3, Nav);
        }

        String Sharp = entity.getSharp();
        if (Sharp != null) {
            stmt.bindString(4, Sharp);
        }

        String SPC = entity.getNewSPC();
        if (SPC != null) {
            stmt.bindString(5, SPC);
        }

        String Hall = entity.getHall();
        if (Hall != null) {
            stmt.bindString(6, Hall);
        }

        String Fx = entity.getFx();
        if (Fx != null) {
            stmt.bindString(7, Fx);
        }

        Integer X1 = entity.getX1();
        if (X1 != null) {
            stmt.bindLong(8, X1);
        }

        Integer Y1 = entity.getY1();
        if (Y1 != null) {
            stmt.bindLong(9, Y1);
        }

        Integer X2 = entity.getX2();
        if (X2 != null) {
            stmt.bindLong(10, X2);
        }

        Integer Y2 = entity.getY2();
        if (Y2 != null) {
            stmt.bindLong(11, Y2);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /** @inheritdoc */
    @Override
    public FloorPlanCoordinate readEntity(Cursor cursor, int offset) {
        FloorPlanCoordinate entity = new FloorPlanCoordinate( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ExhibitionId
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BoothNum
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Nav
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Sharp
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SPC
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Hall
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Fx
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // X1
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // Y1
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // X2
                cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // Y2
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FloorPlanCoordinate entity, int offset) {
        entity.setExhibitionId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setBoothNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNav(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSharp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNewSPC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHall(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFx(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setX1(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setY1(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setX2(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setY2(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
    }

    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FloorPlanCoordinate entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /** @inheritdoc */
    @Override
    public Void getKey(FloorPlanCoordinate entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
