package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.HistoryExhibitor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_EXHIBITOR".
*/
public class HistoryExhibitorDao extends AbstractDao<HistoryExhibitor, Long> {

    public static final String TABLENAME = "HISTORY_EXHIBITOR";

    /**
     * Properties of entity HistoryExhibitor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CompanyID = new Property(1, String.class, "CompanyID", false, "COMPANY_ID");
        public final static Property CompanyNameEN = new Property(2, String.class, "CompanyNameEN", false, "COMPANY_NAME_EN");
        public final static Property CompanyNameCN = new Property(3, String.class, "CompanyNameCN", false, "COMPANY_NAME_CN");
        public final static Property CompanyNameTW = new Property(4, String.class, "CompanyNameTW", false, "COMPANY_NAME_TW");
        public final static Property Booth = new Property(5, String.class, "Booth", false, "BOOTH");
        public final static Property Time = new Property(6, String.class, "Time", false, "TIME");
    };


    public HistoryExhibitorDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryExhibitorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_EXHIBITOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COMPANY_ID\" TEXT," + // 1: CompanyID
                "\"COMPANY_NAME_EN\" TEXT," + // 2: CompanyNameEN
                "\"COMPANY_NAME_CN\" TEXT," + // 3: CompanyNameCN
                "\"COMPANY_NAME_TW\" TEXT," + // 4: CompanyNameTW
                "\"BOOTH\" TEXT," + // 5: Booth
                "\"TIME\" TEXT);"); // 6: Time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_EXHIBITOR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HistoryExhibitor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(2, CompanyID);
        }
 
        String CompanyNameEN = entity.getCompanyNameEN();
        if (CompanyNameEN != null) {
            stmt.bindString(3, CompanyNameEN);
        }
 
        String CompanyNameCN = entity.getCompanyNameCN();
        if (CompanyNameCN != null) {
            stmt.bindString(4, CompanyNameCN);
        }
 
        String CompanyNameTW = entity.getCompanyNameTW();
        if (CompanyNameTW != null) {
            stmt.bindString(5, CompanyNameTW);
        }
 
        String Booth = entity.getBooth();
        if (Booth != null) {
            stmt.bindString(6, Booth);
        }
 
        String Time = entity.getTime();
        if (Time != null) {
            stmt.bindString(7, Time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HistoryExhibitor readEntity(Cursor cursor, int offset) {
        HistoryExhibitor entity = new HistoryExhibitor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CompanyID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CompanyNameEN
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CompanyNameCN
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CompanyNameTW
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Booth
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // Time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HistoryExhibitor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCompanyID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompanyNameEN(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyNameCN(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyNameTW(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBooth(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HistoryExhibitor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HistoryExhibitor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
