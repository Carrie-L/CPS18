package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;


import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "EXHIBITOR_ZONE".
 * CREATE TABLE  ExhibitorZone (
 CompanyID TEXT,
 ThemeZoneCode TEXT,
 IsDelete INTEGER,
 createdAt TEXT,
 updatedAt TEXT);
 *
 *
 */
public class ExhibitorZoneDao extends AbstractDao<ExhibitorZone, Void> {

    public static final String TABLENAME = "ExhibitorZone";

    /**
     * Properties of entity ExhibitorZone.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CompanyID = new Property(0, String.class, "CompanyID", false, "CompanyID");
        public final static Property ThemeZoneCode = new Property(1, String.class, "ThemeZoneCode", false, "ThemeZoneCode");
        public final static Property IsDelete = new Property(2, Boolean.class, "IsDelete", false, "IsDelete");
        public final static Property CreatedAt = new Property(3, String.class, "createdAt", false, "createdAt");
        public final static Property UpdatedAt = new Property(4, String.class, "updatedAt", false, "updatedAt");
    };


    public ExhibitorZoneDao(DaoConfig config) {
        super(config);
    }

    public ExhibitorZoneDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ExhibitorZone\" (" + //
                "\"CompanyID\" TEXT," + // 0: CompanyID
                "\"ThemeZoneCode\" TEXT," + // 1: ThemeZoneCode
                "\"IsDelete\" INTEGER," + // 2: IsDelete
                "\"createdAt\" TEXT," + // 3: createdAt
                "\"updatedAt\" TEXT);"); // 4: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXHIBITOR_ZONE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExhibitorZone entity) {
        stmt.clearBindings();

        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(1, CompanyID);
        }

        String ThemeZoneCode = entity.getThemeZoneCode();
        if (ThemeZoneCode != null) {
            stmt.bindString(2, ThemeZoneCode);
        }

        Boolean IsDelete = entity.getIsDelete();
        if (IsDelete != null) {
            stmt.bindLong(3, IsDelete ? 1L: 0L);
        }

        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(4, createdAt);
        }

        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(5, updatedAt);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /** @inheritdoc */
    @Override
    public ExhibitorZone readEntity(Cursor cursor, int offset) {
        ExhibitorZone entity = new ExhibitorZone( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CompanyID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ThemeZoneCode
                cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // IsDelete
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createdAt
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // updatedAt
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExhibitorZone entity, int offset) {
        entity.setCompanyID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setThemeZoneCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsDelete(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setCreatedAt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdatedAt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ExhibitorZone entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /** @inheritdoc */
    @Override
    public Void getKey(ExhibitorZone entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
