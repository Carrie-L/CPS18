package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "EXHIBITOR__TABLE__TEMP".
*/
public class EXHIBITOR_TABLE_TEMPDao extends AbstractDao<EXHIBITOR_TABLE_TEMP, String> {

    public static final String TABLENAME = "EXHIBITOR__TABLE__TEMP";

    /**
     * Properties of entity EXHIBITOR_TABLE_TEMP.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property COMPANY_ID = new Property(0, String.class, "COMPANY_ID", true, "COMPANY__ID");
        public final static Property IS_FAVOURITE = new Property(1, Integer.class, "IS_FAVOURITE", false, "IS__FAVOURITE");
        public final static Property NOTE = new Property(2, String.class, "NOTE", false, "NOTE");
    }


    public EXHIBITOR_TABLE_TEMPDao(DaoConfig config) {
        super(config);
    }
    
    public EXHIBITOR_TABLE_TEMPDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXHIBITOR__TABLE__TEMP\" (" + //
                "\"COMPANY__ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: COMPANY_ID
                "\"IS__FAVOURITE\" INTEGER," + // 1: IS_FAVOURITE
                "\"NOTE\" TEXT);"); // 2: NOTE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXHIBITOR__TABLE__TEMP\"";
        db.execSQL(sql);
    }


    @Override
    protected final void bindValues(SQLiteStatement stmt, EXHIBITOR_TABLE_TEMP entity) {
        stmt.clearBindings();
 
        String COMPANY_ID = entity.getCOMPANY_ID();
        if (COMPANY_ID != null) {
            stmt.bindString(1, COMPANY_ID);
        }
 
        Integer IS_FAVOURITE = entity.getIS_FAVOURITE();
        if (IS_FAVOURITE != null) {
            stmt.bindLong(2, IS_FAVOURITE);
        }
 
        String NOTE = entity.getNOTE();
        if (NOTE != null) {
            stmt.bindString(3, NOTE);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public EXHIBITOR_TABLE_TEMP readEntity(Cursor cursor, int offset) {
        EXHIBITOR_TABLE_TEMP entity = new EXHIBITOR_TABLE_TEMP( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // COMPANY_ID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // IS_FAVOURITE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // NOTE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EXHIBITOR_TABLE_TEMP entity, int offset) {
        entity.setCOMPANY_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIS_FAVOURITE(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setNOTE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(EXHIBITOR_TABLE_TEMP entity, long rowId) {
        return entity.getCOMPANY_ID();
    }
    
    @Override
    public String getKey(EXHIBITOR_TABLE_TEMP entity) {
        if(entity != null) {
            return entity.getCOMPANY_ID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
