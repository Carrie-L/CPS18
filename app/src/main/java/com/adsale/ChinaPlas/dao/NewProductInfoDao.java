package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "NEW_PRODUCT_INFO".
*/
public class NewProductInfoDao extends AbstractDao<NewProductInfo, Void> {

    public static final String TABLENAME = "NEW_PRODUCT_INFO";

    /**
     * Properties of entity NewProductInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RID = new Property(0, String.class, "RID", false, "RID");
        public final static Property CompanyID = new Property(1, String.class, "CompanyID", false, "COMPANY_ID");
        public final static Property BoothNo = new Property(2, String.class, "BoothNo", false, "BOOTH_NO");
        public final static Property CompanyNameEn = new Property(3, String.class, "CompanyNameEn", false, "COMPANY_NAME_EN");
        public final static Property CompanyNameSc = new Property(4, String.class, "CompanyNameSc", false, "COMPANY_NAME_SC");
        public final static Property CompanyNameTc = new Property(5, String.class, "CompanyNameTc", false, "COMPANY_NAME_TC");
        public final static Property Product_Name_SC = new Property(6, String.class, "Product_Name_SC", false, "PRODUCT__NAME__SC");
        public final static Property Rroduct_Description_SC = new Property(7, String.class, "Rroduct_Description_SC", false, "RRODUCT__DESCRIPTION__SC");
        public final static Property Product_Name_TC = new Property(8, String.class, "Product_Name_TC", false, "PRODUCT__NAME__TC");
        public final static Property Rroduct_Description_TC = new Property(9, String.class, "Rroduct_Description_TC", false, "RRODUCT__DESCRIPTION__TC");
        public final static Property Product_Name_EN = new Property(10, String.class, "Product_Name_EN", false, "PRODUCT__NAME__EN");
        public final static Property Rroduct_Description_EN = new Property(11, String.class, "Rroduct_Description_EN", false, "RRODUCT__DESCRIPTION__EN");
    };


    public NewProductInfoDao(DaoConfig config) {
        super(config);
    }
    
    public NewProductInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_PRODUCT_INFO\" (" + //
                "\"RID\" TEXT," + // 0: RID
                "\"COMPANY_ID\" TEXT," + // 1: CompanyID
                "\"BOOTH_NO\" TEXT," + // 2: BoothNo
                "\"COMPANY_NAME_EN\" TEXT," + // 3: CompanyNameEn
                "\"COMPANY_NAME_SC\" TEXT," + // 4: CompanyNameSc
                "\"COMPANY_NAME_TC\" TEXT," + // 5: CompanyNameTc
                "\"PRODUCT__NAME__SC\" TEXT," + // 6: Product_Name_SC
                "\"RRODUCT__DESCRIPTION__SC\" TEXT," + // 7: Rroduct_Description_SC
                "\"PRODUCT__NAME__TC\" TEXT," + // 8: Product_Name_TC
                "\"RRODUCT__DESCRIPTION__TC\" TEXT," + // 9: Rroduct_Description_TC
                "\"PRODUCT__NAME__EN\" TEXT," + // 10: Product_Name_EN
                "\"RRODUCT__DESCRIPTION__EN\" TEXT);"); // 11: Rroduct_Description_EN
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_PRODUCT_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewProductInfo entity) {
        stmt.clearBindings();
 
        String RID = entity.getRID();
        if (RID != null) {
            stmt.bindString(1, RID);
        }
 
        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(2, CompanyID);
        }
 
        String BoothNo = entity.getBoothNo();
        if (BoothNo != null) {
            stmt.bindString(3, BoothNo);
        }
 
        String CompanyNameEn = entity.getCompanyNameEn();
        if (CompanyNameEn != null) {
            stmt.bindString(4, CompanyNameEn);
        }
 
        String CompanyNameSc = entity.getCompanyNameSc();
        if (CompanyNameSc != null) {
            stmt.bindString(5, CompanyNameSc);
        }
 
        String CompanyNameTc = entity.getCompanyNameTc();
        if (CompanyNameTc != null) {
            stmt.bindString(6, CompanyNameTc);
        }
 
        String Product_Name_SC = entity.getProduct_Name_SC();
        if (Product_Name_SC != null) {
            stmt.bindString(7, Product_Name_SC);
        }
 
        String Rroduct_Description_SC = entity.getRroduct_Description_SC();
        if (Rroduct_Description_SC != null) {
            stmt.bindString(8, Rroduct_Description_SC);
        }
 
        String Product_Name_TC = entity.getProduct_Name_TC();
        if (Product_Name_TC != null) {
            stmt.bindString(9, Product_Name_TC);
        }
 
        String Rroduct_Description_TC = entity.getRroduct_Description_TC();
        if (Rroduct_Description_TC != null) {
            stmt.bindString(10, Rroduct_Description_TC);
        }
 
        String Product_Name_EN = entity.getProduct_Name_EN();
        if (Product_Name_EN != null) {
            stmt.bindString(11, Product_Name_EN);
        }
 
        String Rroduct_Description_EN = entity.getRroduct_Description_EN();
        if (Rroduct_Description_EN != null) {
            stmt.bindString(12, Rroduct_Description_EN);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public NewProductInfo readEntity(Cursor cursor, int offset) {
        NewProductInfo entity = new NewProductInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // RID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CompanyID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BoothNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CompanyNameEn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CompanyNameSc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CompanyNameTc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Product_Name_SC
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Rroduct_Description_SC
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Product_Name_TC
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Rroduct_Description_TC
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Product_Name_EN
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // Rroduct_Description_EN
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewProductInfo entity, int offset) {
        entity.setRID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCompanyID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBoothNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyNameEn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyNameSc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCompanyNameTc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProduct_Name_SC(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRroduct_Description_SC(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProduct_Name_TC(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRroduct_Description_TC(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProduct_Name_EN(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRroduct_Description_EN(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(NewProductInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(NewProductInfo entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
