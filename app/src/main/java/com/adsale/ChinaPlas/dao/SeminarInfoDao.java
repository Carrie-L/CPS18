package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.SeminarInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEMINAR_INFO".
*/
public class SeminarInfoDao extends AbstractDao<SeminarInfo, Void> {

    public static final String TABLENAME = "SEMINAR_INFO";

    /**
     * Properties of entity SeminarInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Integer.class, "ID", false, "ID");
        public final static Property EventID = new Property(1, Integer.class, "EventID", false, "EVENT_ID");
        public final static Property CompanyID = new Property(2, String.class, "CompanyID", false, "COMPANY_ID");
        public final static Property Booth = new Property(3, String.class, "Booth", false, "BOOTH");
        public final static Property Date = new Property(4, String.class, "Date", false, "DATE");
        public final static Property Time = new Property(5, String.class, "Time", false, "TIME");
        public final static Property Hall = new Property(6, String.class, "Hall", false, "HALL");
        public final static Property RoomNo = new Property(7, String.class, "RoomNo", false, "ROOM_NO");
        public final static Property PresentCompany = new Property(8, String.class, "PresentCompany", false, "PRESENT_COMPANY");
        public final static Property Topic = new Property(9, String.class, "Topic", false, "TOPIC");
        public final static Property Speaker = new Property(10, String.class, "Speaker", false, "SPEAKER");
        public final static Property LangID = new Property(11, Integer.class, "langID", false, "LANG_ID");
        public final static Property OrderFull = new Property(12, Integer.class, "OrderFull", false, "ORDER_FULL");
        public final static Property OrderMob = new Property(13, Integer.class, "OrderMob", false, "ORDER_MOB");
    };


    public SeminarInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SeminarInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEMINAR_INFO\" (" + //
                "\"ID\" INTEGER," + // 0: ID
                "\"EVENT_ID\" INTEGER," + // 1: EventID
                "\"COMPANY_ID\" TEXT," + // 2: CompanyID
                "\"BOOTH\" TEXT," + // 3: Booth
                "\"DATE\" TEXT," + // 4: Date
                "\"TIME\" TEXT," + // 5: Time
                "\"HALL\" TEXT," + // 6: Hall
                "\"ROOM_NO\" TEXT," + // 7: RoomNo
                "\"PRESENT_COMPANY\" TEXT," + // 8: PresentCompany
                "\"TOPIC\" TEXT," + // 9: Topic
                "\"SPEAKER\" TEXT," + // 10: Speaker
                "\"LANG_ID\" INTEGER," + // 11: langID
                "\"ORDER_FULL\" INTEGER," + // 12: OrderFull
                "\"ORDER_MOB\" INTEGER);"); // 13: OrderMob
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEMINAR_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SeminarInfo entity) {
        stmt.clearBindings();
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Integer EventID = entity.getEventID();
        if (EventID != null) {
            stmt.bindLong(2, EventID);
        }
 
        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(3, CompanyID);
        }
 
        String Booth = entity.getBooth();
        if (Booth != null) {
            stmt.bindString(4, Booth);
        }
 
        String Date = entity.getDate();
        if (Date != null) {
            stmt.bindString(5, Date);
        }
 
        String Time = entity.getTime();
        if (Time != null) {
            stmt.bindString(6, Time);
        }
 
        String Hall = entity.getHall();
        if (Hall != null) {
            stmt.bindString(7, Hall);
        }
 
        String RoomNo = entity.getRoomNo();
        if (RoomNo != null) {
            stmt.bindString(8, RoomNo);
        }
 
        String PresentCompany = entity.getPresentCompany();
        if (PresentCompany != null) {
            stmt.bindString(9, PresentCompany);
        }
 
        String Topic = entity.getTopic();
        if (Topic != null) {
            stmt.bindString(10, Topic);
        }
 
        String Speaker = entity.getSpeaker();
        if (Speaker != null) {
            stmt.bindString(11, Speaker);
        }
 
        Integer langID = entity.getLangID();
        if (langID != null) {
            stmt.bindLong(12, langID);
        }
 
        Integer OrderFull = entity.getOrderFull();
        if (OrderFull != null) {
            stmt.bindLong(13, OrderFull);
        }
 
        Integer OrderMob = entity.getOrderMob();
        if (OrderMob != null) {
            stmt.bindLong(14, OrderMob);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SeminarInfo readEntity(Cursor cursor, int offset) {
        SeminarInfo entity = new SeminarInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // EventID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CompanyID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Booth
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Hall
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // RoomNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // PresentCompany
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Topic
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Speaker
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // langID
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // OrderFull
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // OrderMob
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SeminarInfo entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setEventID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCompanyID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBooth(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHall(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRoomNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPresentCompany(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTopic(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSpeaker(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLangID(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setOrderFull(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setOrderMob(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SeminarInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SeminarInfo entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
