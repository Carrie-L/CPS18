package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.Floor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FLOOR".
 */
public class FloorDao extends AbstractDao<Floor, String> {

    public static final String TABLENAME = "FLOOR";

    /**
     * Properties of entity Floor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FloorID = new Property(0, String.class, "FloorID", true, "FLOOR_ID");
        public final static Property FloorNameTW = new Property(1, String.class, "FloorNameTW", false, "FLOOR_NAME_TW");
        public final static Property FloorNameEN = new Property(2, String.class, "FloorNameEN", false, "FLOOR_NAME_EN");
        public final static Property FloorNameCN = new Property(3, String.class, "FloorNameCN", false, "FLOOR_NAME_CN");
        public final static Property SEQ = new Property(4, Integer.class, "SEQ", false, "SEQ");
    }

    ;


    public FloorDao(DaoConfig config) {
        super(config);
    }

    public FloorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"FLOOR\" (" + //
                "\"FLOOR_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: FloorID
                "\"FLOOR_NAME_TW\" TEXT," + // 1: FloorNameTW
                "\"FLOOR_NAME_EN\" TEXT," + // 2: FloorNameEN
                "\"FLOOR_NAME_CN\" TEXT," + // 3: FloorNameCN
                "\"SEQ\" INTEGER);");// 4: SEQ
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FLOOR\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Floor entity) {
        stmt.clearBindings();

        String FloorID = entity.getFloorID();
        if (FloorID != null) {
            stmt.bindString(1, FloorID);
        }

        String FloorNameTW = entity.getFloorNameTW();
        if (FloorNameTW != null) {
            stmt.bindString(2, FloorNameTW);
        }

        String FloorNameEN = entity.getFloorNameEN();
        if (FloorNameEN != null) {
            stmt.bindString(3, FloorNameEN);
        }

        String FloorNameCN = entity.getFloorNameCN();
        if (FloorNameCN != null) {
            stmt.bindString(4, FloorNameCN);
        }

        Integer SEQ = entity.getSEQ();
        if (SEQ != null) {
            stmt.bindLong(5, SEQ);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Floor readEntity(Cursor cursor, int offset) {
        Floor entity = new Floor( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FloorID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FloorNameTW
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FloorNameEN
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FloorNameCN
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // SEQ
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Floor entity, int offset) {
        entity.setFloorID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFloorNameTW(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFloorNameEN(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFloorNameCN(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSEQ(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(Floor entity, long rowId) {
        return entity.getFloorID();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(Floor entity) {
        if (entity != null) {
            return entity.getFloorID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
