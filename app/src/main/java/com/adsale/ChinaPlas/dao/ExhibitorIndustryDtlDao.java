package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.ExhibitorIndustryDtl;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXHIBITOR_INDUSTRY_DTL".
*/
public class ExhibitorIndustryDtlDao extends AbstractDao<ExhibitorIndustryDtl, Void> {

    public static final String TABLENAME = "EXHIBITOR_INDUSTRY_DTL";

    /**
     * Properties of entity ExhibitorIndustryDtl.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CompanyID = new Property(0, String.class, "CompanyID", false, "COMPANY_ID");
        public final static Property CatalogProductSubID = new Property(1, String.class, "CatalogProductSubID", false, "CATALOG_PRODUCT_SUB_ID");
    };


    public ExhibitorIndustryDtlDao(DaoConfig config) {
        super(config);
    }
    
    public ExhibitorIndustryDtlDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXHIBITOR_INDUSTRY_DTL\" (" + //
                "\"COMPANY_ID\" TEXT," + // 0: CompanyID
                "\"CATALOG_PRODUCT_SUB_ID\" TEXT);"); // 1: CatalogProductSubID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXHIBITOR_INDUSTRY_DTL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExhibitorIndustryDtl entity) {
        stmt.clearBindings();
 
        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(1, CompanyID);
        }
 
        String CatalogProductSubID = entity.getCatalogProductSubID();
        if (CatalogProductSubID != null) {
            stmt.bindString(2, CatalogProductSubID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ExhibitorIndustryDtl readEntity(Cursor cursor, int offset) {
        ExhibitorIndustryDtl entity = new ExhibitorIndustryDtl( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CompanyID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // CatalogProductSubID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExhibitorIndustryDtl entity, int offset) {
        entity.setCompanyID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCatalogProductSubID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ExhibitorIndustryDtl entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ExhibitorIndustryDtl entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
