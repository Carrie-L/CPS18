package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PRODUCT_IMAGE".
 */
public class ProductImageDao extends AbstractDao<ProductImage, Void> {

    public static final String TABLENAME = "PRODUCT_IMAGE";

    /**
     * Properties of entity ProductImage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RID = new Property(0, String.class, "RID", false, "RID");
        public final static Property PID = new Property(1, String.class, "PID", false, "PID");
        public final static Property Image_File = new Property(2, String.class, "Image_File", false, "IMAGE__FILE");
    }

    ;


    public ProductImageDao(DaoConfig config) {
        super(config);
    }

    public ProductImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_IMAGE\" (" + //
                "\"RID\" TEXT," + // 0: RID
                "\"PID\" TEXT," + // 1: PID
                "\"IMAGE__FILE\" TEXT);"); // 2: Image_File
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_IMAGE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductImage entity) {
        stmt.clearBindings();

        String RID = entity.getRID();
        if (RID != null) {
            stmt.bindString(1, RID);
        }

        String PID = entity.getPID();
        if (PID != null) {
            stmt.bindString(2, PID);
        }

        String Image_File = entity.getImage_File();
        if (Image_File != null) {
            stmt.bindString(3, Image_File);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public ProductImage readEntity(Cursor cursor, int offset) {
        ProductImage entity = new ProductImage( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // RID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // Image_File
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, ProductImage entity, int offset) {
        entity.setRID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage_File(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(ProductImage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(ProductImage entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
