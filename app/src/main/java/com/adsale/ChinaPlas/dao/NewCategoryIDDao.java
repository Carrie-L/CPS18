package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "NEW_CATEGORY_ID".
*/
public class NewCategoryIDDao extends AbstractDao<NewCategoryID, Void> {

    public static final String TABLENAME = "NEW_CATEGORY_ID";

    /**
     * Properties of entity NewCategoryID.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Category = new Property(0, String.class, "Category", false, "CATEGORY");
        public final static Property RID = new Property(1, String.class, "RID", false, "RID");
    };


    public NewCategoryIDDao(DaoConfig config) {
        super(config);
    }
    
    public NewCategoryIDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_CATEGORY_ID\" (" + //
                "\"CATEGORY\" TEXT," + // 0: Category
                "\"RID\" TEXT);"); // 1: RID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_CATEGORY_ID\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewCategoryID entity) {
        stmt.clearBindings();
 
        String Category = entity.getCategory();
        if (Category != null) {
            stmt.bindString(1, Category);
        }
 
        String RID = entity.getRID();
        if (RID != null) {
            stmt.bindString(2, RID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public NewCategoryID readEntity(Cursor cursor, int offset) {
        NewCategoryID entity = new NewCategoryID( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Category
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // RID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewCategoryID entity, int offset) {
        entity.setCategory(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(NewCategoryID entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(NewCategoryID entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
