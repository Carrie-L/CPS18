package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "HISTORY__EXHIBITOR__TEMP".
*/
public class HISTORY_EXHIBITOR_TEMPDao extends AbstractDao<HISTORY_EXHIBITOR_TEMP, String> {

    public static final String TABLENAME = "HISTORY__EXHIBITOR__TEMP";

    /**
     * Properties of entity HISTORY_EXHIBITOR_TEMP.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property COMPANY_ID = new Property(1, Integer.class, "COMPANY_ID", false, "COMPANY__ID");
        public final static Property COMPANY_NAME_EN = new Property(2, String.class, "COMPANY_NAME_EN", false, "COMPANY__NAME__EN");
        public final static Property COMPANY_NAME_CN = new Property(3, String.class, "COMPANY_NAME_CN", false, "COMPANY__NAME__CN");
        public final static Property COMPANY_NAME_TW = new Property(4, String.class, "COMPANY_NAME_TW", false, "COMPANY__NAME__TW");
        public final static Property BOOTH = new Property(5, String.class, "BOOTH", false, "BOOTH");
        public final static Property TIME = new Property(6, Integer.class, "TIME", false, "TIME");
    }


    public HISTORY_EXHIBITOR_TEMPDao(DaoConfig config) {
        super(config);
    }
    
    public HISTORY_EXHIBITOR_TEMPDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY__EXHIBITOR__TEMP\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"COMPANY__ID\" INTEGER," + // 1: COMPANY_ID
                "\"COMPANY__NAME__EN\" TEXT," + // 2: COMPANY_NAME_EN
                "\"COMPANY__NAME__CN\" TEXT," + // 3: COMPANY_NAME_CN
                "\"COMPANY__NAME__TW\" TEXT," + // 4: COMPANY_NAME_TW
                "\"BOOTH\" TEXT," + // 5: BOOTH
                "\"TIME\" INTEGER);"); // 6: TIME
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY__EXHIBITOR__TEMP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HISTORY_EXHIBITOR_TEMP entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        Integer COMPANY_ID = entity.getCOMPANY_ID();
        if (COMPANY_ID != null) {
            stmt.bindLong(2, COMPANY_ID);
        }
 
        String COMPANY_NAME_EN = entity.getCOMPANY_NAME_EN();
        if (COMPANY_NAME_EN != null) {
            stmt.bindString(3, COMPANY_NAME_EN);
        }
 
        String COMPANY_NAME_CN = entity.getCOMPANY_NAME_CN();
        if (COMPANY_NAME_CN != null) {
            stmt.bindString(4, COMPANY_NAME_CN);
        }
 
        String COMPANY_NAME_TW = entity.getCOMPANY_NAME_TW();
        if (COMPANY_NAME_TW != null) {
            stmt.bindString(5, COMPANY_NAME_TW);
        }
 
        String BOOTH = entity.getBOOTH();
        if (BOOTH != null) {
            stmt.bindString(6, BOOTH);
        }
 
        Integer TIME = entity.getTIME();
        if (TIME != null) {
            stmt.bindLong(7, TIME);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public HISTORY_EXHIBITOR_TEMP readEntity(Cursor cursor, int offset) {
        HISTORY_EXHIBITOR_TEMP entity = new HISTORY_EXHIBITOR_TEMP( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // COMPANY_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // COMPANY_NAME_EN
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // COMPANY_NAME_CN
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // COMPANY_NAME_TW
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // BOOTH
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // TIME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HISTORY_EXHIBITOR_TEMP entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCOMPANY_ID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCOMPANY_NAME_EN(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCOMPANY_NAME_CN(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCOMPANY_NAME_TW(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBOOTH(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTIME(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HISTORY_EXHIBITOR_TEMP entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(HISTORY_EXHIBITOR_TEMP entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }
     @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
