package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.SeminarSpeaker;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEMINAR_SPEAKER".
*/
public class SeminarSpeakerDao extends AbstractDao<SeminarSpeaker, Void> {

    public static final String TABLENAME = "SEMINAR_SPEAKER";

    /**
     * Properties of entity SeminarSpeaker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property EventID = new Property(0, Integer.class, "EventID", false, "EVENT_ID");
        public final static Property CompanyID = new Property(1, String.class, "CompanyID", false, "COMPANY_ID");
        public final static Property Seminarsummary = new Property(2, String.class, "Seminarsummary", false, "SEMINARSUMMARY");
        public final static Property SpeakerPhoto = new Property(3, String.class, "SpeakerPhoto", false, "SPEAKER_PHOTO");
        public final static Property SpeakerName = new Property(4, String.class, "SpeakerName", false, "SPEAKER_NAME");
        public final static Property SpeakerPosition = new Property(5, String.class, "SpeakerPosition", false, "SPEAKER_POSITION");
        public final static Property SpeakerInfo = new Property(6, String.class, "SpeakerInfo", false, "SPEAKER_INFO");
        public final static Property Language = new Property(7, String.class, "Language", false, "LANGUAGE");
        public final static Property FreeParticipation = new Property(8, String.class, "FreeParticipation", false, "FREE_PARTICIPATION");
        public final static Property ContactPerson = new Property(9, String.class, "ContactPerson", false, "CONTACT_PERSON");
        public final static Property Email = new Property(10, String.class, "Email", false, "EMAIL");
        public final static Property Tel = new Property(11, String.class, "Tel", false, "TEL");
        public final static Property LangID = new Property(12, String.class, "LangID", false, "LANG_ID");
        public final static Property ID = new Property(13, Integer.class, "ID", false, "ID");
    };


    public SeminarSpeakerDao(DaoConfig config) {
        super(config);
    }
    
    public SeminarSpeakerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEMINAR_SPEAKER\" (" + //
                "\"EVENT_ID\" INTEGER," + // 0: EventID
                "\"COMPANY_ID\" TEXT," + // 1: CompanyID
                "\"SEMINARSUMMARY\" TEXT," + // 2: Seminarsummary
                "\"SPEAKER_PHOTO\" TEXT," + // 3: SpeakerPhoto
                "\"SPEAKER_NAME\" TEXT," + // 4: SpeakerName
                "\"SPEAKER_POSITION\" TEXT," + // 5: SpeakerPosition
                "\"SPEAKER_INFO\" TEXT," + // 6: SpeakerInfo
                "\"LANGUAGE\" TEXT," + // 7: Language
                "\"FREE_PARTICIPATION\" TEXT," + // 8: FreeParticipation
                "\"CONTACT_PERSON\" TEXT," + // 9: ContactPerson
                "\"EMAIL\" TEXT," + // 10: Email
                "\"TEL\" TEXT," + // 11: Tel
                "\"LANG_ID\" TEXT," + // 12: LangID
                "\"ID\" INTEGER);"); // 13: ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEMINAR_SPEAKER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SeminarSpeaker entity) {
        stmt.clearBindings();
 
        Integer EventID = entity.getEventID();
        if (EventID != null) {
            stmt.bindLong(1, EventID);
        }
 
        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(2, CompanyID);
        }
 
        String Seminarsummary = entity.getSeminarsummary();
        if (Seminarsummary != null) {
            stmt.bindString(3, Seminarsummary);
        }
 
        String SpeakerPhoto = entity.getSpeakerPhoto();
        if (SpeakerPhoto != null) {
            stmt.bindString(4, SpeakerPhoto);
        }
 
        String SpeakerName = entity.getSpeakerName();
        if (SpeakerName != null) {
            stmt.bindString(5, SpeakerName);
        }
 
        String SpeakerPosition = entity.getSpeakerPosition();
        if (SpeakerPosition != null) {
            stmt.bindString(6, SpeakerPosition);
        }
 
        String SpeakerInfo = entity.getSpeakerInfo();
        if (SpeakerInfo != null) {
            stmt.bindString(7, SpeakerInfo);
        }
 
        String Language = entity.getLanguage();
        if (Language != null) {
            stmt.bindString(8, Language);
        }
 
        String FreeParticipation = entity.getFreeParticipation();
        if (FreeParticipation != null) {
            stmt.bindString(9, FreeParticipation);
        }
 
        String ContactPerson = entity.getContactPerson();
        if (ContactPerson != null) {
            stmt.bindString(10, ContactPerson);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(11, Email);
        }
 
        String Tel = entity.getTel();
        if (Tel != null) {
            stmt.bindString(12, Tel);
        }
 
        String LangID = entity.getLangID();
        if (LangID != null) {
            stmt.bindString(13, LangID);
        }
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(14, ID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SeminarSpeaker readEntity(Cursor cursor, int offset) {
        SeminarSpeaker entity = new SeminarSpeaker( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // EventID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CompanyID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Seminarsummary
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SpeakerPhoto
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SpeakerName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SpeakerPosition
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // SpeakerInfo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Language
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FreeParticipation
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ContactPerson
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Tel
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // LangID
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // ID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SeminarSpeaker entity, int offset) {
        entity.setEventID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCompanyID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSeminarsummary(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSpeakerPhoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSpeakerName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSpeakerPosition(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSpeakerInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLanguage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFreeParticipation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContactPerson(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTel(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLangID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setID(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SeminarSpeaker entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SeminarSpeaker entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
