package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.NameCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NAME_CARD".
*/
public class NameCardDao extends AbstractDao<NameCard, String> {

    public static final String TABLENAME = "NAME_CARD";

    /**
     * Properties of entity NameCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DeviceId = new Property(0, String.class, "DeviceId", true, "DEVICE_ID");
        public final static Property Company = new Property(1, String.class, "Company", false, "COMPANY");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property Title = new Property(3, String.class, "Title", false, "TITLE");
        public final static Property Phone = new Property(4, String.class, "Phone", false, "PHONE");
        public final static Property Email = new Property(5, String.class, "Email", false, "EMAIL");
        public final static Property QQ = new Property(6, String.class, "QQ", false, "QQ");
        public final static Property WeChat = new Property(7, String.class, "WeChat", false, "WE_CHAT");
        public final static Property UpdateDateTime = new Property(8, String.class, "UpdateDateTime", false, "UPDATE_DATE_TIME");
    };


    public NameCardDao(DaoConfig config) {
        super(config);
    }
    
    public NameCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NAME_CARD\" (" + //
                "\"DEVICE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: DeviceId
                "\"COMPANY\" TEXT NOT NULL ," + // 1: Company
                "\"NAME\" TEXT NOT NULL ," + // 2: Name
                "\"TITLE\" TEXT NOT NULL ," + // 3: Title
                "\"PHONE\" TEXT NOT NULL ," + // 4: Phone
                "\"EMAIL\" TEXT NOT NULL ," + // 5: Email
                "\"QQ\" TEXT," + // 6: QQ
                "\"WE_CHAT\" TEXT," + // 7: WeChat
                "\"UPDATE_DATE_TIME\" TEXT);"); // 8: UpdateDateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NAME_CARD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NameCard entity) {
        stmt.clearBindings();
 
        String DeviceId = entity.getDeviceId();
        if (DeviceId != null) {
            stmt.bindString(1, DeviceId);
        }
        stmt.bindString(2, entity.getCompany());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getTitle());
        stmt.bindString(5, entity.getPhone());
        stmt.bindString(6, entity.getEmail());
 
        String QQ = entity.getQQ();
        if (QQ != null) {
            stmt.bindString(7, QQ);
        }

        String WeChat = entity.getWeChat();
        if (WeChat != null) {
            stmt.bindString(8, WeChat);
        }
 
        String UpdateDateTime = entity.getUpdateDateTime();
        if (UpdateDateTime != null) {
            stmt.bindString(9, UpdateDateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NameCard readEntity(Cursor cursor, int offset) {
        NameCard entity = new NameCard( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // DeviceId
            cursor.getString(offset + 1), // Company
            cursor.getString(offset + 2), // Name
            cursor.getString(offset + 3), // Title
            cursor.getString(offset + 4), // Phone
            cursor.getString(offset + 5), // Email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // QQ
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // WeChat
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // UpdateDateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NameCard entity, int offset) {
        entity.setDeviceId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCompany(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setPhone(cursor.getString(offset + 4));
        entity.setEmail(cursor.getString(offset + 5));
        entity.setQQ(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeChat(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateDateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NameCard entity, long rowId) {
        return entity.getDeviceId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NameCard entity) {
        if(entity != null) {
            return entity.getDeviceId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
