package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.ScheduleInfo;

import static com.adsale.ChinaPlas.dao.ScheduleInfoDao.Properties.StartTime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SCHEDULE_INFO".
 */
public class ScheduleInfoDao extends AbstractDao<ScheduleInfo, Long> {

    public static final String TABLENAME = "SCHEDULE_INFO";

    /**
     * Properties of entity ScheduleInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "Title", false, "TITLE");
        public final static Property Note = new Property(2, String.class, "Note", false, "NOTE");
        public final static Property Location = new Property(3, String.class, "Location", false, "LOCATION");
        public final static Property CompanyID = new Property(4, String.class, "CompanyID", false, "COMPANY_ID");
        public final static Property StartDate = new Property(5, String.class, "StartDate", false, "START_DATE");
        public final static Property StartTime = new Property(6, String.class, "StartTime", false, "START_TIME");
        public final static Property Hour = new Property(7, Integer.class, "Hour", false, "HOUR");
        public final static Property Minute = new Property(8, Integer.class, "Minute", false, "MINUTE");
        public final static Property Event_CId = new Property(9, String.class, "Event_CId", false, "EVENT_CID");
    }

    public ScheduleInfoDao(DaoConfig config) {
        super(config);
    }

    public ScheduleInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: Title
                "\"NOTE\" TEXT," + // 2: Note
                "\"LOCATION\" TEXT," + // 3: Location
                "\"COMPANY_ID\" TEXT," + // 4: CompanyID
                "\"START_DATE\" TEXT," + // 5: START_DATE
                "\"START_TIME\" TEXT," + // 6: StartTime
                "\"HOUR\" INTEGER," + // 7: Hour
                "\"MINUTE\" INTEGER," + // 8: Minute
                "\"EVENT_CID\" TEXT);"); // 9: EVENT_CID
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULE_INFO\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, ScheduleInfo entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(2, Title);
        }

        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(3, Note);
        }

        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(4, Location);
        }

        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(5, CompanyID);
        }

        String StartDate = entity.getStartDate();
        if (StartDate != null) {
            stmt.bindString(6, StartDate);
        }

        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(7, StartTime);
        }

        Integer Hour = entity.getHour();
        if (Hour != null) {
            stmt.bindLong(8, Hour);
        }

        Integer Minute = entity.getMinute();
        if (Minute != null) {
            stmt.bindLong(9, Minute);
        }

        String Event_CId = entity.getCompanyID();
        if (Event_CId != null) {
            stmt.bindString(10, Event_CId);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public ScheduleInfo readEntity(Cursor cursor, int offset) {
        ScheduleInfo entity = new ScheduleInfo( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Title
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Note
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Location
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CompanyID
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // StartDate
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // StartTime
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // Length
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // Allday
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Location
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, ScheduleInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNote(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStartTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHour(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMinute(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setEvent_CId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(ScheduleInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(ScheduleInfo entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
