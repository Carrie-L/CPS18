package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "EXHIBITOR".
 */
public class ExhibitorDao extends AbstractDao<Exhibitor, String> {

    public static final String TABLENAME = "EXHIBITOR";

    /**
     * Properties of entity Exhibitor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CompanyID = new Property(0, String.class, "CompanyID", true, "CompanyID");
        public final static Property CompanyNameEN = new Property(1, String.class, "CompanyNameEN", false, "CompanyNameEN");
        public final static Property CompanyNameTW = new Property(2, String.class, "CompanyNameTW", false, "CompanyNameTW");
        public final static Property CompanyNameCN = new Property(3, String.class, "CompanyNameCN", false, "CompanyNameCN");
        public final static Property AddressE = new Property(4, String.class, "AddressE", false, "AddressE");
        public final static Property AddressT = new Property(5, String.class, "AddressT", false, "AddressT");
        public final static Property AddressS = new Property(6, String.class, "AddressS", false, "AddressS");
        public final static Property Tel = new Property(7, String.class, "Tel", false, "Tel");
        public final static Property Fax = new Property(8, String.class, "Fax", false, "Fax");
        public final static Property Email = new Property(9, String.class, "Email", false, "Email");
        public final static Property Website = new Property(10, String.class, "Website", false, "Website");
        public final static Property CountryID = new Property(11, String.class, "CountryID", false, "CountryID");
        public final static Property BoothNo = new Property(12, String.class, "BoothNo", false, "BoothNo");
        public final static Property StrokeEng = new Property(13, String.class, "StrokeEng", false, "StrokeEng");
        public final static Property StrokeTrad = new Property(14, String.class, "StrokeTrad", false, "StrokeTrad");
        public final static Property StrokeSimp = new Property(15, String.class, "StrokeSimp", false, "StrokeSimp");
        public final static Property PYSimp = new Property(16, String.class, "PYSimp", false, "PYSimp");
        public final static Property ImgFolder = new Property(17, String.class, "ImgFolder", false, "ImgFolder");
        public final static Property DescE = new Property(18, String.class, "DescE", false, "DescE");
        public final static Property DescS = new Property(19, String.class, "DescS", false, "DescS");
        public final static Property DescT = new Property(20, String.class, "DescT", false, "DescT");
        public final static Property PhotoFileName = new Property(21, String.class, "PhotoFileName", false, "PhotoFileName");
        public final static Property NewTechUpdateDate = new Property(22, String.class, "NewTechUpdateDate", false, "NewTechUpdateDate");
        public final static Property SeqEN = new Property(23, String.class, "SeqEN", false, "SeqEN");
        public final static Property SeqTC = new Property(24, String.class, "SeqTC", false, "SeqTC");
        public final static Property SeqSC = new Property(25, String.class, "SeqSC", false, "SeqSC");
        public final static Property HallNo = new Property(26, String.class, "HallNo", false, "HallNo");
        public final static Property IsFavourite = new Property(27, Integer.class, "IsFavourite", false, "IsFavourite");
        public final static Property Note = new Property(28, String.class, "Note", false, "Note");
        public final static Property Rate = new Property(29, String.class, "Rate", false, "RATE");
        public final static Property IsDelete = new Property(30, Boolean.class, "IsDelete", false, "IsDelete");
        public final static Property DescUpdatedAt = new Property(31, String.class, "DescUpdatedAt", false, "DescUpdatedAt");
        public final static Property UpdatedAt = new Property(32, String.class, "updatedAt", false, "updatedAt");
        public final static Property seqHall = new Property(33, Double.class, "seqHall", false, "seqHall");
    }

    ;


    public ExhibitorDao(DaoConfig config) {
        super(config);
    }

    public ExhibitorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     * CREATE TABLE  EXHIBITOR ( CompanyID TEXT PRIMARY KEY NOT NULL , CompanyNameEN TEXT, CompanyNameTW TEXT, CompanyNameCN TEXT, AddressE TEXT, AddressT TEXT,AddressS TEXT, Tel TEXT, Fax TEXT, Email TEXT,Website TEXT, CountryID TEXT, BoothNo TEXT, StrokeEng TEXT, StrokeTrad TEXT, StrokeSimp TEXT, PYSimp TEXT, ImgFolder TEXT, DescE TEXT, DescS TEXT, DescT TEXT, PhotoFileName TEXT, NewTechUpdateDate TEXT, SeqEN INTEGER, SeqTC INTEGER, SeqSC INTEGER, HallNo TEXT, IsFavourite INTEGER, Note TEXT, RATE INTEGER, IsDelete INTEGER, createdAt TEXT, updatedAt TEXT);
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotexists) {
        String constraint = ifNotexists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXHIBITOR\" (" + //
                "\"CompanyID\" TEXT PRIMARY KEY NOT NULL ," + // 0: CompanyID
                "\"CompanyNameEN\" TEXT," + // 1: CompanyNameEN
                "\"CompanyNameTW\" TEXT," + // 2: CompanyNameTW
                "\"CompanyNameCN\" TEXT," + // 3: CompanyNameCN
                "\"AddressE\" TEXT," + // 4: AddressE
                "\"AddressT\" TEXT," + // 5: AddressT
                "\"AddressS\" TEXT," + // 6: AddressS
                "\"Tel\" TEXT," + // 8: Tel
                "\"Fax\" TEXT," + // 9: Fax
                "\"Email\" TEXT," + // 10: Email
                "\"Website\" TEXT," + // 11: Website
                "\"CountryID\" TEXT," + // 12: CountryID
                "\"BoothNo\" TEXT," + // 19: BoothNo
                "\"StrokeEng\" TEXT," + // 20: StrokeEng
                "\"StrokeTrad\" TEXT," + // 21: StrokeTrad
                "\"StrokeSimp\" TEXT," + // 22: StrokeSimp
                "\"PYSimp\" TEXT," + // 23: PYSimp
                "\"ImgFolder\" TEXT," + // 24: ImgFolder
                "\"DescE\" TEXT," + // 28: DescE
                "\"DescS\" TEXT," + // 29: DescS
                "\"DescT\" TEXT," + // 30: DescT
                "\"PhotoFileName\" TEXT," + // 31: PhotoFileName
                "\"NewTechUpdateDate\" TEXT," + // 31: PhotoFileName
                "\"SeqEN\" INTEGER," + // 32: SeqEN
                "\"SeqTC\" INTEGER," + // 33: SeqTC
                "\"SeqSC\" INTEGER," + // 34: SeqSC
                "\"HallNo\" TEXT," + // 35: HallNo
                "\"IsFavourite\" INTEGER," + // 36: IsFavourite
                "\"Note\" TEXT," + // 37: Note
                "\"RATE\" INTEGER," + // 38: Note
                "\"IsDelete\" INTEGER," + // 30: IsDelete
                "\"createdAt\" TEXT," + // 31: createdAt
                "\"updatedAt\" TEXT);"); // 32: updatedAt


    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXHIBITOR\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Exhibitor entity) {
        stmt.clearBindings();

        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(1, CompanyID);
        }

        String CompanyNameEN = entity.getCompanyNameEN();
        if (CompanyNameEN != null) {
            stmt.bindString(2, CompanyNameEN);
        }

        String CompanyNameTW = entity.getCompanyNameTW();
        if (CompanyNameTW != null) {
            stmt.bindString(3, CompanyNameTW);
        }

        String CompanyNameCN = entity.getCompanyNameCN();
        if (CompanyNameCN != null) {
            stmt.bindString(4, CompanyNameCN);
        }

        String AddressE = entity.getAddressE();
        if (AddressE != null) {
            stmt.bindString(5, AddressE);
        }

        String AddressT = entity.getAddressT();
        if (AddressT != null) {
            stmt.bindString(6, AddressT);
        }

        String AddressS = entity.getAddressS();
        if (AddressS != null) {
            stmt.bindString(7, AddressS);
        }

        String Tel = entity.getTel();
        if (Tel != null) {
            stmt.bindString(8, Tel);
        }

        String Fax = entity.getFax();
        if (Fax != null) {
            stmt.bindString(9, Fax);
        }

        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(10, Email);
        }

        String Website = entity.getWebsite();
        if (Website != null) {
            stmt.bindString(11, Website);
        }

        String CountryID = entity.getCountryID();
        if (CountryID != null) {
            stmt.bindString(12, CountryID);
        }

        String BoothNo = entity.getBoothNo();
        if (BoothNo != null) {
            stmt.bindString(13, BoothNo);
        }

        String StrokeEng = entity.getStrokeEng();
        if (StrokeEng != null) {
            stmt.bindString(14, StrokeEng);
        }

        String StrokeTrad = entity.getStrokeTrad();
        if (StrokeTrad != null) {
            stmt.bindString(15, StrokeTrad);
        }

        String StrokeSimp = entity.getStrokeSimp();
        if (StrokeSimp != null) {
            stmt.bindString(16, StrokeSimp);
        }

        String PYSimp = entity.getPYSimp();
        if (PYSimp != null) {
            stmt.bindString(17, PYSimp);
        }

        String ImgFolder = entity.getImgFolder();
        if (ImgFolder != null) {
            stmt.bindString(18, ImgFolder);
        }

        String DescE = entity.getDescE();
        if (DescE != null) {
            stmt.bindString(19, DescE);
        }

        String DescS = entity.getDescS();
        if (DescS != null) {
            stmt.bindString(20, DescS);
        }

        String DescT = entity.getDescT();
        if (DescT != null) {
            stmt.bindString(21, DescT);
        }

        String PhotoFileName = entity.getPhotoFileName();
        if (PhotoFileName != null) {
            stmt.bindString(22, PhotoFileName);
        }

        String NewTechUpdateDate = entity.getNewTechUpdateDate();
        if (NewTechUpdateDate != null) {
            stmt.bindString(23, NewTechUpdateDate);
        }

        String SeqEN = entity.getSeqEN();
        if (SeqEN != null) {
            stmt.bindString(24, SeqEN);
        }

        String SeqTC = entity.getSeqTC();
        if (SeqTC != null) {
            stmt.bindString(25, SeqTC);
        }

        String SeqSC = entity.getSeqSC();
        if (SeqSC != null) {
            stmt.bindString(26, SeqSC);
        }

        String HallNo = entity.getHallNo();
        if (HallNo != null) {
            stmt.bindString(27, HallNo);
        }

        Integer IsFavourite = entity.getIsFavourite();
        if (IsFavourite != null) {
            stmt.bindLong(28, IsFavourite);
        }

        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(29, Note);
        }

        Integer Rate = entity.getRate();
        if (Rate != null) {
            stmt.bindLong(30, Rate);
        }

        Boolean IsDelete = entity.getDelete();
        if (IsDelete != null) {
            stmt.bindLong(31, IsDelete ? 1L : 0L);
        }

        String DescUpdatedAt = entity.getDescUpdatedAt();
        if (DescUpdatedAt != null) {
            stmt.bindString(32, DescUpdatedAt);
        }

        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(33, updatedAt);
        }

        Double seqHall = entity.seqHall;
        if (seqHall != null) {
            stmt.bindDouble(34, seqHall);
        }


    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Exhibitor readEntity(Cursor cursor, int offset) {
        Exhibitor entity = new Exhibitor( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CompanyID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CompanyNameEN
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CompanyNameTW
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CompanyNameCN
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AddressE
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // AddressT
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // AddressS
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Tel
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Fax
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Email
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Website
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // CountryID
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // BoothNo
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // StrokeEng
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // StrokeTrad
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // StrokeSimp
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // PYSimp
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ImgFolder
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // DescE
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // DescS
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // DescT
                cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // PhotoFileName
                cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // NewTechUpdateDate
                cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // SeqEN
                cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // SeqTC
                cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // SeqSC
                cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // HallNo
                cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // IsFavourite
                cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // Note
                cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // Rate
                cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0, // IsDelete
                cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // DescUpdatedAt
                cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // updatedAt
                cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33) // seqHall
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Exhibitor entity, int offset) {
        entity.setCompanyID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCompanyNameEN(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompanyNameTW(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyNameCN(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddressE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddressT(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddressS(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFax(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWebsite(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCountryID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBoothNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStrokeEng(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStrokeTrad(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStrokeSimp(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPYSimp(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setImgFolder(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDescE(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDescS(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDescT(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPhotoFileName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setNewTechUpdateDate(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSeqEN(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSeqTC(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setSeqSC(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setHallNo(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setIsFavourite(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setNote(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRate(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setDelete(cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0);
        entity.setDescUpdatedAt(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setUpdatedAt(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setSeqHall(cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(Exhibitor entity, long rowId) {
        return entity.getCompanyID();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(Exhibitor entity) {
        if (entity != null) {
            return entity.getCompanyID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
