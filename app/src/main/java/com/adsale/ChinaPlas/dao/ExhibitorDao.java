package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.Exhibitor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXHIBITOR".
*/
public class ExhibitorDao extends AbstractDao<Exhibitor, String> {

    public static final String TABLENAME = "EXHIBITOR";

    /**
     * Properties of entity Exhibitor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CompanyID = new Property(0, String.class, "CompanyID", true, "COMPANY_ID");
        public final static Property CompanyNameEN = new Property(1, String.class, "CompanyNameEN", false, "COMPANY_NAME_EN");
        public final static Property CompanyNameTW = new Property(2, String.class, "CompanyNameTW", false, "COMPANY_NAME_TW");
        public final static Property CompanyNameCN = new Property(3, String.class, "CompanyNameCN", false, "COMPANY_NAME_CN");
        public final static Property AddressE = new Property(4, String.class, "AddressE", false, "ADDRESS_E");
        public final static Property AddressT = new Property(5, String.class, "AddressT", false, "ADDRESS_T");
        public final static Property AddressS = new Property(6, String.class, "AddressS", false, "ADDRESS_S");
        public final static Property Postal = new Property(7, String.class, "Postal", false, "POSTAL");
        public final static Property Tel = new Property(8, String.class, "Tel", false, "TEL");
        public final static Property Fax = new Property(9, String.class, "Fax", false, "FAX");
        public final static Property Email = new Property(10, String.class, "Email", false, "EMAIL");
        public final static Property Website = new Property(11, String.class, "Website", false, "WEBSITE");
        public final static Property CountryID = new Property(12, String.class, "CountryID", false, "COUNTRY_ID");
        public final static Property AddressE1 = new Property(13, String.class, "AddressE1", false, "ADDRESS_E1");
        public final static Property AddressT1 = new Property(14, String.class, "AddressT1", false, "ADDRESS_T1");
        public final static Property AddressS1 = new Property(15, String.class, "AddressS1", false, "ADDRESS_S1");
        public final static Property AddressE2 = new Property(16, String.class, "AddressE2", false, "ADDRESS_E2");
        public final static Property AddressT2 = new Property(17, String.class, "AddressT2", false, "ADDRESS_T2");
        public final static Property AddressS2 = new Property(18, String.class, "AddressS2", false, "ADDRESS_S2");
        public final static Property BoothNo = new Property(19, String.class, "BoothNo", false, "BOOTH_NO");
        public final static Property StrokeEng = new Property(20, String.class, "StrokeEng", false, "STROKE_ENG");
        public final static Property StrokeTrad = new Property(21, String.class, "StrokeTrad", false, "STROKE_TRAD");
        public final static Property StrokeSimp = new Property(22, String.class, "StrokeSimp", false, "STROKE_SIMP");
        public final static Property PYSimp = new Property(23, String.class, "PYSimp", false, "PYSIMP");
        public final static Property ImgFolder = new Property(24, String.class, "ImgFolder", false, "IMG_FOLDER");
        public final static Property ExhibitNameE = new Property(25, String.class, "ExhibitNameE", false, "EXHIBIT_NAME_E");
        public final static Property ExhibitNameS = new Property(26, String.class, "ExhibitNameS", false, "EXHIBIT_NAME_S");
        public final static Property ExhibitNameT = new Property(27, String.class, "ExhibitNameT", false, "EXHIBIT_NAME_T");
        public final static Property DescE = new Property(28, String.class, "DescE", false, "DESC_E");
        public final static Property DescS = new Property(29, String.class, "DescS", false, "DESC_S");
        public final static Property DescT = new Property(30, String.class, "DescT", false, "DESC_T");
        public final static Property PhotoFileName = new Property(31, String.class, "PhotoFileName", false, "PHOTO_FILE_NAME");
        public final static Property SeqEN = new Property(32, Integer.class, "SeqEN", false, "SEQ_EN");
        public final static Property SeqTC = new Property(33, Integer.class, "SeqTC", false, "SEQ_TC");
        public final static Property SeqSC = new Property(34, Integer.class, "SeqSC", false, "SEQ_SC");
        public final static Property HallNo = new Property(35, String.class, "HallNo", false, "HALL_NO");
        public final static Property IsFavourite = new Property(36, Boolean.class, "IsFavourite", false, "IS_FAVOURITE");
        public final static Property Note = new Property(37, String.class, "Note", false, "NOTE");
    };


    public ExhibitorDao(DaoConfig config) {
        super(config);
    }
    
    public ExhibitorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXHIBITOR\" (" + //
                "\"COMPANY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: CompanyID
                "\"COMPANY_NAME_EN\" TEXT," + // 1: CompanyNameEN
                "\"COMPANY_NAME_TW\" TEXT," + // 2: CompanyNameTW
                "\"COMPANY_NAME_CN\" TEXT," + // 3: CompanyNameCN
                "\"ADDRESS_E\" TEXT," + // 4: AddressE
                "\"ADDRESS_T\" TEXT," + // 5: AddressT
                "\"ADDRESS_S\" TEXT," + // 6: AddressS
                "\"POSTAL\" TEXT," + // 7: Postal
                "\"TEL\" TEXT," + // 8: Tel
                "\"FAX\" TEXT," + // 9: Fax
                "\"EMAIL\" TEXT," + // 10: Email
                "\"WEBSITE\" TEXT," + // 11: Website
                "\"COUNTRY_ID\" TEXT," + // 12: CountryID
                "\"ADDRESS_E1\" TEXT," + // 13: AddressE1
                "\"ADDRESS_T1\" TEXT," + // 14: AddressT1
                "\"ADDRESS_S1\" TEXT," + // 15: AddressS1
                "\"ADDRESS_E2\" TEXT," + // 16: AddressE2
                "\"ADDRESS_T2\" TEXT," + // 17: AddressT2
                "\"ADDRESS_S2\" TEXT," + // 18: AddressS2
                "\"BOOTH_NO\" TEXT," + // 19: BoothNo
                "\"STROKE_ENG\" TEXT," + // 20: StrokeEng
                "\"STROKE_TRAD\" TEXT," + // 21: StrokeTrad
                "\"STROKE_SIMP\" TEXT," + // 22: StrokeSimp
                "\"PYSIMP\" TEXT," + // 23: PYSimp
                "\"IMG_FOLDER\" TEXT," + // 24: ImgFolder
                "\"EXHIBIT_NAME_E\" TEXT," + // 25: ExhibitNameE
                "\"EXHIBIT_NAME_S\" TEXT," + // 26: ExhibitNameS
                "\"EXHIBIT_NAME_T\" TEXT," + // 27: ExhibitNameT
                "\"DESC_E\" TEXT," + // 28: DescE
                "\"DESC_S\" TEXT," + // 29: DescS
                "\"DESC_T\" TEXT," + // 30: DescT
                "\"PHOTO_FILE_NAME\" TEXT," + // 31: PhotoFileName
                "\"SEQ_EN\" INTEGER," + // 32: SeqEN
                "\"SEQ_TC\" INTEGER," + // 33: SeqTC
                "\"SEQ_SC\" INTEGER," + // 34: SeqSC
                "\"HALL_NO\" TEXT," + // 35: HallNo
                "\"IS_FAVOURITE\" INTEGER," + // 36: IsFavourite
                "\"NOTE\" TEXT);"); // 37: Note
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXHIBITOR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Exhibitor entity) {
        stmt.clearBindings();
 
        String CompanyID = entity.getCompanyID();
        if (CompanyID != null) {
            stmt.bindString(1, CompanyID);
        }
 
        String CompanyNameEN = entity.getCompanyNameEN();
        if (CompanyNameEN != null) {
            stmt.bindString(2, CompanyNameEN);
        }
 
        String CompanyNameTW = entity.getCompanyNameTW();
        if (CompanyNameTW != null) {
            stmt.bindString(3, CompanyNameTW);
        }
 
        String CompanyNameCN = entity.getCompanyNameCN();
        if (CompanyNameCN != null) {
            stmt.bindString(4, CompanyNameCN);
        }
 
        String AddressE = entity.getAddressE();
        if (AddressE != null) {
            stmt.bindString(5, AddressE);
        }
 
        String AddressT = entity.getAddressT();
        if (AddressT != null) {
            stmt.bindString(6, AddressT);
        }
 
        String AddressS = entity.getAddressS();
        if (AddressS != null) {
            stmt.bindString(7, AddressS);
        }
 
        String Postal = entity.getPostal();
        if (Postal != null) {
            stmt.bindString(8, Postal);
        }
 
        String Tel = entity.getTel();
        if (Tel != null) {
            stmt.bindString(9, Tel);
        }
 
        String Fax = entity.getFax();
        if (Fax != null) {
            stmt.bindString(10, Fax);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(11, Email);
        }
 
        String Website = entity.getWebsite();
        if (Website != null) {
            stmt.bindString(12, Website);
        }
 
        String CountryID = entity.getCountryID();
        if (CountryID != null) {
            stmt.bindString(13, CountryID);
        }
 
        String AddressE1 = entity.getAddressE1();
        if (AddressE1 != null) {
            stmt.bindString(14, AddressE1);
        }
 
        String AddressT1 = entity.getAddressT1();
        if (AddressT1 != null) {
            stmt.bindString(15, AddressT1);
        }
 
        String AddressS1 = entity.getAddressS1();
        if (AddressS1 != null) {
            stmt.bindString(16, AddressS1);
        }
 
        String AddressE2 = entity.getAddressE2();
        if (AddressE2 != null) {
            stmt.bindString(17, AddressE2);
        }
 
        String AddressT2 = entity.getAddressT2();
        if (AddressT2 != null) {
            stmt.bindString(18, AddressT2);
        }
 
        String AddressS2 = entity.getAddressS2();
        if (AddressS2 != null) {
            stmt.bindString(19, AddressS2);
        }
 
        String BoothNo = entity.getBoothNo();
        if (BoothNo != null) {
            stmt.bindString(20, BoothNo);
        }
 
        String StrokeEng = entity.getStrokeEng();
        if (StrokeEng != null) {
            stmt.bindString(21, StrokeEng);
        }
 
        String StrokeTrad = entity.getStrokeTrad();
        if (StrokeTrad != null) {
            stmt.bindString(22, StrokeTrad);
        }
 
        String StrokeSimp = entity.getStrokeSimp();
        if (StrokeSimp != null) {
            stmt.bindString(23, StrokeSimp);
        }
 
        String PYSimp = entity.getPYSimp();
        if (PYSimp != null) {
            stmt.bindString(24, PYSimp);
        }
 
        String ImgFolder = entity.getImgFolder();
        if (ImgFolder != null) {
            stmt.bindString(25, ImgFolder);
        }
 
        String ExhibitNameE = entity.getExhibitNameE();
        if (ExhibitNameE != null) {
            stmt.bindString(26, ExhibitNameE);
        }
 
        String ExhibitNameS = entity.getExhibitNameS();
        if (ExhibitNameS != null) {
            stmt.bindString(27, ExhibitNameS);
        }
 
        String ExhibitNameT = entity.getExhibitNameT();
        if (ExhibitNameT != null) {
            stmt.bindString(28, ExhibitNameT);
        }
 
        String DescE = entity.getDescE();
        if (DescE != null) {
            stmt.bindString(29, DescE);
        }
 
        String DescS = entity.getDescS();
        if (DescS != null) {
            stmt.bindString(30, DescS);
        }
 
        String DescT = entity.getDescT();
        if (DescT != null) {
            stmt.bindString(31, DescT);
        }
 
        String PhotoFileName = entity.getPhotoFileName();
        if (PhotoFileName != null) {
            stmt.bindString(32, PhotoFileName);
        }
 
        Integer SeqEN = entity.getSeqEN();
        if (SeqEN != null) {
            stmt.bindLong(33, SeqEN);
        }
 
        Integer SeqTC = entity.getSeqTC();
        if (SeqTC != null) {
            stmt.bindLong(34, SeqTC);
        }
 
        Integer SeqSC = entity.getSeqSC();
        if (SeqSC != null) {
            stmt.bindLong(35, SeqSC);
        }
 
        String HallNo = entity.getHallNo();
        if (HallNo != null) {
            stmt.bindString(36, HallNo);
        }
 
        Integer IsFavourite = entity.getIsFavourite();
        if (IsFavourite != null) {
            stmt.bindLong(37, IsFavourite);
        }
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(38, Note);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Exhibitor readEntity(Cursor cursor, int offset) {
        Exhibitor entity = new Exhibitor( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CompanyID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CompanyNameEN
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CompanyNameTW
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CompanyNameCN
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AddressE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // AddressT
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // AddressS
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Postal
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Tel
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Fax
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Website
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // CountryID
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // AddressE1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // AddressT1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // AddressS1
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // AddressE2
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // AddressT2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // AddressS2
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // BoothNo
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // StrokeEng
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // StrokeTrad
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // StrokeSimp
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // PYSimp
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // ImgFolder
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // ExhibitNameE
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // ExhibitNameS
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // ExhibitNameT
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // DescE
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // DescS
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // DescT
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // PhotoFileName
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // SeqEN
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // SeqTC
            cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34), // SeqSC
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // HallNo
            cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36), // IsFavourite
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37) // Note
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Exhibitor entity, int offset) {
        entity.setCompanyID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCompanyNameEN(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompanyNameTW(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyNameCN(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddressE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddressT(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddressS(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPostal(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFax(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWebsite(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCountryID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAddressE1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAddressT1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAddressS1(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAddressE2(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAddressT2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAddressS2(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBoothNo(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setStrokeEng(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStrokeTrad(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setStrokeSimp(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setPYSimp(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setImgFolder(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setExhibitNameE(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setExhibitNameS(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setExhibitNameT(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setDescE(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setDescS(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setDescT(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setPhotoFileName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setSeqEN(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setSeqTC(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setSeqSC(cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34));
        entity.setHallNo(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setIsFavourite(cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36));
        entity.setNote(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Exhibitor entity, long rowId) {
        return entity.getCompanyID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Exhibitor entity) {
        if(entity != null) {
            return entity.getCompanyID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
