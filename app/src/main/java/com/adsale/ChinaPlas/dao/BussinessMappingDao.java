package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.BussinessMapping;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUSSINESS_MAPPING".
*/
public class BussinessMappingDao extends AbstractDao<BussinessMapping, Long> {

    public static final String TABLENAME = "BUSSINESS_MAPPING";

    /**
     * Properties of entity BussinessMapping.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductIntCode = new Property(1, String.class, "ProductIntCode", false, "PRODUCT_INT_CODE");
        public final static Property CatalogProductSubID = new Property(2, String.class, "CatalogProductSubID", false, "CATALOG_PRODUCT_SUB_ID");
        public final static Property ProductEName = new Property(3, String.class, "ProductEName", false, "PRODUCT_ENAME");
        public final static Property ProductTName = new Property(4, String.class, "ProductTName", false, "PRODUCT_TNAME");
        public final static Property ProductSName = new Property(5, String.class, "ProductSName", false, "PRODUCT_SNAME");
        public final static Property IsSelected = new Property(6, Boolean.class, "IsSelected", false, "IS_SELECTED");
    };


    public BussinessMappingDao(DaoConfig config) {
        super(config);
    }
    
    public BussinessMappingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUSSINESS_MAPPING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PRODUCT_INT_CODE\" TEXT," + // 1: ProductIntCode
                "\"CATALOG_PRODUCT_SUB_ID\" TEXT," + // 2: CatalogProductSubID
                "\"PRODUCT_ENAME\" TEXT," + // 3: ProductEName
                "\"PRODUCT_TNAME\" TEXT," + // 4: ProductTName
                "\"PRODUCT_SNAME\" TEXT," + // 5: ProductSName
                "\"IS_SELECTED\" INTEGER);"); // 6: IsSelected
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUSSINESS_MAPPING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BussinessMapping entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ProductIntCode = entity.getProductIntCode();
        if (ProductIntCode != null) {
            stmt.bindString(2, ProductIntCode);
        }
 
        String CatalogProductSubID = entity.getCatalogProductSubID();
        if (CatalogProductSubID != null) {
            stmt.bindString(3, CatalogProductSubID);
        }
 
        String ProductEName = entity.getProductEName();
        if (ProductEName != null) {
            stmt.bindString(4, ProductEName);
        }
 
        String ProductTName = entity.getProductTName();
        if (ProductTName != null) {
            stmt.bindString(5, ProductTName);
        }
 
        String ProductSName = entity.getProductSName();
        if (ProductSName != null) {
            stmt.bindString(6, ProductSName);
        }
 
        Boolean IsSelected = entity.getIsSelected();
        if (IsSelected != null) {
            stmt.bindLong(7, IsSelected ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BussinessMapping readEntity(Cursor cursor, int offset) {
        BussinessMapping entity = new BussinessMapping( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ProductIntCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CatalogProductSubID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ProductEName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ProductTName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ProductSName
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // IsSelected
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BussinessMapping entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductIntCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCatalogProductSubID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductEName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductTName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductSName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsSelected(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BussinessMapping entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BussinessMapping entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
