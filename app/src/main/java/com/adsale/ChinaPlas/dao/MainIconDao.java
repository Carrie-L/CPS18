package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.adsale.ChinaPlas.dao.MainIcon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAIN_ICON".
*/
public class MainIconDao extends AbstractDao<MainIcon, String> {

    public static final String TABLENAME = "MAIN_ICON";

    /**
     * Properties of entity MainIcon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IconID = new Property(0, String.class, "IconID", true, "ICON_ID");
        public final static Property TitleTW = new Property(1, String.class, "TitleTW", false, "TITLE_TW");
        public final static Property TitleCN = new Property(2, String.class, "TitleCN", false, "TITLE_CN");
        public final static Property TitleEN = new Property(3, String.class, "TitleEN", false, "TITLE_EN");
        public final static Property Icon = new Property(4, String.class, "Icon", false, "ICON");
        public final static Property CType = new Property(5, int.class, "CType", false, "CTYPE");
        public final static Property CFile = new Property(6, String.class, "CFile", false, "CFILE");
        public final static Property ZipDateTime = new Property(7, String.class, "ZipDateTime", false, "ZIP_DATE_TIME");
        public final static Property IsHidden = new Property(8, int.class, "IsHidden", false, "IS_HIDDEN");
        public final static Property SEQ = new Property(9, int.class, "SEQ", false, "SEQ");
        public final static Property CreateDateTime = new Property(10, String.class, "CreateDateTime", false, "CREATE_DATE_TIME");
        public final static Property UpdateDateTime = new Property(11, String.class, "UpdateDateTime", false, "UPDATE_DATE_TIME");
        public final static Property RecordTimeStamp = new Property(12, String.class, "RecordTimeStamp", false, "RECORD_TIME_STAMP");
        public final static Property IsDown = new Property(13, int.class, "IsDown", false, "IS_DOWN");
        public final static Property BaiDu_TJ = new Property(14, String.class, "BaiDu_TJ", false, "BAI_DU__TJ");
        public final static Property Google_TJ = new Property(15, String.class, "Google_TJ", false, "GOOGLE__TJ");
    };


    public MainIconDao(DaoConfig config) {
        super(config);
    }
    
    public MainIconDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAIN_ICON\" (" + //
                "\"ICON_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: IconID
                "\"TITLE_TW\" TEXT NOT NULL ," + // 1: TitleTW
                "\"TITLE_CN\" TEXT NOT NULL ," + // 2: TitleCN
                "\"TITLE_EN\" TEXT NOT NULL ," + // 3: TitleEN
                "\"ICON\" TEXT NOT NULL ," + // 4: Icon
                "\"CTYPE\" INTEGER NOT NULL ," + // 5: CType
                "\"CFILE\" TEXT," + // 6: CFile
                "\"ZIP_DATE_TIME\" TEXT," + // 7: ZipDateTime
                "\"IS_HIDDEN\" INTEGER NOT NULL ," + // 8: IsHidden
                "\"SEQ\" INTEGER NOT NULL ," + // 9: SEQ
                "\"CREATE_DATE_TIME\" TEXT NOT NULL ," + // 10: CreateDateTime
                "\"UPDATE_DATE_TIME\" TEXT NOT NULL ," + // 11: UpdateDateTime
                "\"RECORD_TIME_STAMP\" TEXT NOT NULL ," + // 12: RecordTimeStamp
                "\"IS_DOWN\" INTEGER NOT NULL ," + // 13: IsDown
                "\"BAI_DU__TJ\" TEXT NOT NULL ," + // 14: BaiDu_TJ
                "\"GOOGLE__TJ\" TEXT);"); // 15: Google_TJ
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAIN_ICON\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MainIcon entity) {
        stmt.clearBindings();
 
        String IconID = entity.getIconID();
        if (IconID != null) {
            stmt.bindString(1, IconID);
        }
        stmt.bindString(2, entity.getTitleTW());
        stmt.bindString(3, entity.getTitleCN());
        stmt.bindString(4, entity.getTitleEN());
        stmt.bindString(5, entity.getIcon());
        stmt.bindLong(6, entity.getCType());
 
        String CFile = entity.getCFile();
        if (CFile != null) {
            stmt.bindString(7, CFile);
        }
 
        String ZipDateTime = entity.getZipDateTime();
        if (ZipDateTime != null) {
            stmt.bindString(8, ZipDateTime);
        }
        stmt.bindLong(9, entity.getIsHidden());
        stmt.bindLong(10, entity.getSEQ());
        stmt.bindString(11, entity.getCreateDateTime());
        stmt.bindString(12, entity.getUpdateDateTime());
        stmt.bindString(13, entity.getRecordTimeStamp());
        stmt.bindLong(14, entity.getIsDown());
        stmt.bindString(15, entity.getBaiDu_TJ());
 
        String Google_TJ = entity.getGoogle_TJ();
        if (Google_TJ != null) {
            stmt.bindString(16, Google_TJ);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MainIcon readEntity(Cursor cursor, int offset) {
        MainIcon entity = new MainIcon( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // IconID
            cursor.getString(offset + 1), // TitleTW
            cursor.getString(offset + 2), // TitleCN
            cursor.getString(offset + 3), // TitleEN
            cursor.getString(offset + 4), // Icon
            cursor.getInt(offset + 5), // CType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CFile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ZipDateTime
            cursor.getInt(offset + 8), // IsHidden
            cursor.getInt(offset + 9), // SEQ
            cursor.getString(offset + 10), // CreateDateTime
            cursor.getString(offset + 11), // UpdateDateTime
            cursor.getString(offset + 12), // RecordTimeStamp
            cursor.getInt(offset + 13), // IsDown
            cursor.getString(offset + 14), // BaiDu_TJ
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // Google_TJ
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MainIcon entity, int offset) {
        entity.setIconID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitleTW(cursor.getString(offset + 1));
        entity.setTitleCN(cursor.getString(offset + 2));
        entity.setTitleEN(cursor.getString(offset + 3));
        entity.setIcon(cursor.getString(offset + 4));
        entity.setCType(cursor.getInt(offset + 5));
        entity.setCFile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZipDateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsHidden(cursor.getInt(offset + 8) );
        entity.setSEQ(cursor.getInt(offset + 9));
        entity.setCreateDateTime(cursor.getString(offset + 10));
        entity.setUpdateDateTime(cursor.getString(offset + 11));
        entity.setRecordTimeStamp(cursor.getString(offset + 12));
        entity.setIsDown(cursor.getInt(offset + 13));
        entity.setBaiDu_TJ(cursor.getString(offset + 14));
        entity.setGoogle_TJ(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MainIcon entity, long rowId) {
        return entity.getIconID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MainIcon entity) {
        if(entity != null) {
            return entity.getIconID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
