package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PRODUCT_APPLICATION".
*/
public class ProductApplicationDao extends AbstractDao<ProductApplication, Void> {

    public static final String TABLENAME = "PRODUCT_APPLICATION";

    /**
     * Properties of entity ProductApplication.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IndustryID = new Property(0, String.class, "IndustryID", false, "INDUSTRY_ID");
        public final static Property NameEn = new Property(1, String.class, "NameEn", false, "NAME_EN");
        public final static Property NameEnShort = new Property(2, String.class, "NameEnShort", false, "NAME_EN_SHORT");
        public final static Property NameTc = new Property(3, String.class, "NameTc", false, "NAME_TC");
        public final static Property NameSc = new Property(4, String.class, "NameSc", false, "NAME_SC");
        public final static Property Ordering = new Property(5, String.class, "Ordering", false, "ORDERING");
    };


    public ProductApplicationDao(DaoConfig config) {
        super(config);
    }
    
    public ProductApplicationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_APPLICATION\" (" + //
                "\"INDUSTRY_ID\" TEXT," + // 0: IndustryID
                "\"NAME_EN\" TEXT," + // 1: NameEn
                "\"NAME_EN_SHORT\" TEXT," + // 2: NameEnShort
                "\"NAME_TC\" TEXT," + // 3: NameTc
                "\"NAME_SC\" TEXT," + // 4: NameSc
                "\"ORDERING\" TEXT);"); // 5: Ordering
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_APPLICATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductApplication entity) {
        stmt.clearBindings();
 
        String IndustryID = entity.getIndustryID();
        if (IndustryID != null) {
            stmt.bindString(1, IndustryID);
        }
 
        String NameEn = entity.getNameEn();
        if (NameEn != null) {
            stmt.bindString(2, NameEn);
        }
 
        String NameEnShort = entity.getNameEnShort();
        if (NameEnShort != null) {
            stmt.bindString(3, NameEnShort);
        }
 
        String NameTc = entity.getNameTc();
        if (NameTc != null) {
            stmt.bindString(4, NameTc);
        }
 
        String NameSc = entity.getNameSc();
        if (NameSc != null) {
            stmt.bindString(5, NameSc);
        }
 
        String Ordering = entity.getOrdering();
        if (Ordering != null) {
            stmt.bindString(6, Ordering);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ProductApplication readEntity(Cursor cursor, int offset) {
        ProductApplication entity = new ProductApplication( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // IndustryID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NameEn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NameEnShort
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NameTc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // NameSc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Ordering
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductApplication entity, int offset) {
        entity.setIndustryID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNameEn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNameEnShort(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNameTc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNameSc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrdering(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ProductApplication entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ProductApplication entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
