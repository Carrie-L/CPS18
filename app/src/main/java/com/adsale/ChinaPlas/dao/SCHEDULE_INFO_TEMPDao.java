package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SCHEDULE__INFO__TEMP".
*/
public class SCHEDULE_INFO_TEMPDao extends AbstractDao<SCHEDULE_INFO_TEMP, String> {

    public static final String TABLENAME = "SCHEDULE__INFO__TEMP";

    /**
     * Properties of entity SCHEDULE_INFO_TEMP.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property TITLE = new Property(1, Integer.class, "TITLE", false, "TITLE");
        public final static Property NOTE = new Property(2, String.class, "NOTE", false, "NOTE");
        public final static Property LOCATION = new Property(3, String.class, "LOCATION", false, "LOCATION");
        public final static Property COMPANY_ID = new Property(4, String.class, "COMPANY_ID", false, "COMPANY__ID");
        public final static Property START_TIME = new Property(5, String.class, "START_TIME", false, "START__TIME");
        public final static Property LENGTH = new Property(6, Integer.class, "LENGTH", false, "LENGTH");
        public final static Property ALLDAY = new Property(7, Integer.class, "ALLDAY", false, "ALLDAY");
        public final static Property EVENT_CID = new Property(8, String.class, "EVENT_CID", false, "EVENT__CID");
    }


    public SCHEDULE_INFO_TEMPDao(DaoConfig config) {
        super(config);
    }
    
    public SCHEDULE_INFO_TEMPDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULE__INFO__TEMP\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"TITLE\" INTEGER," + // 1: TITLE
                "\"NOTE\" TEXT," + // 2: NOTE
                "\"LOCATION\" TEXT," + // 3: LOCATION
                "\"COMPANY__ID\" TEXT," + // 4: COMPANY_ID
                "\"START__TIME\" TEXT," + // 5: START_TIME
                "\"LENGTH\" INTEGER," + // 6: LENGTH
                "\"ALLDAY\" INTEGER," + // 7: ALLDAY
                "\"EVENT__CID\" TEXT);"); // 8: EVENT_CID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULE__INFO__TEMP\"";
        db.execSQL(sql);
    }


    @Override
    protected final void bindValues(SQLiteStatement stmt, SCHEDULE_INFO_TEMP entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        Integer TITLE = entity.getTITLE();
        if (TITLE != null) {
            stmt.bindLong(2, TITLE);
        }
 
        String NOTE = entity.getNOTE();
        if (NOTE != null) {
            stmt.bindString(3, NOTE);
        }
 
        String LOCATION = entity.getLOCATION();
        if (LOCATION != null) {
            stmt.bindString(4, LOCATION);
        }
 
        String COMPANY_ID = entity.getCOMPANY_ID();
        if (COMPANY_ID != null) {
            stmt.bindString(5, COMPANY_ID);
        }
 
        String START_TIME = entity.getSTART_TIME();
        if (START_TIME != null) {
            stmt.bindString(6, START_TIME);
        }
 
        Integer LENGTH = entity.getLENGTH();
        if (LENGTH != null) {
            stmt.bindLong(7, LENGTH);
        }
 
        Integer ALLDAY = entity.getALLDAY();
        if (ALLDAY != null) {
            stmt.bindLong(8, ALLDAY);
        }
 
        String EVENT_CID = entity.getEVENT_CID();
        if (EVENT_CID != null) {
            stmt.bindString(9, EVENT_CID);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SCHEDULE_INFO_TEMP readEntity(Cursor cursor, int offset) {
        SCHEDULE_INFO_TEMP entity = new SCHEDULE_INFO_TEMP( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // TITLE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NOTE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // LOCATION
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // COMPANY_ID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // START_TIME
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // LENGTH
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // ALLDAY
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // EVENT_CID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SCHEDULE_INFO_TEMP entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTITLE(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setNOTE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLOCATION(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCOMPANY_ID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSTART_TIME(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLENGTH(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setALLDAY(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setEVENT_CID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SCHEDULE_INFO_TEMP entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(SCHEDULE_INFO_TEMP entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
