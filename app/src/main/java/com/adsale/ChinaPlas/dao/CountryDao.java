package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "COUNTRY".
*/
public class CountryDao extends AbstractDao<Country, String> {

    public static final String TABLENAME = "Country";

    /**
     * Properties of entity Country.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CountryID = new Property(0, String.class, "CountryID", true, "CountryID");
        public final static Property CountryEng = new Property(1, String.class, "CountryEng", false, "CountryEng");
        public final static Property CountryTC = new Property(2, String.class, "CountryTC", false, "CountryTC");
        public final static Property CountrySC = new Property(3, String.class, "CountrySC", false, "CountrySC");
        public final static Property SortTC = new Property(4, String.class, "SortTC", false, "SortTC");
        public final static Property SortSC = new Property(5, String.class, "SortSC", false, "SortSC");
        public final static Property SortEN = new Property(6, String.class, "SortEN", false, "SortEN");
        public final static Property CreatedAt = new Property(7, String.class, "createdAt", false, "createdAt");
        public final static Property UpdatedAt = new Property(8, String.class, "updatedAt", false, "updatedAt");
    };


    public CountryDao(DaoConfig config) {
        super(config);
    }
    
    public CountryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNTRY\" (" + //
                "\"COUNTRY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: CountryID
                "\"COUNTRY_ENG\" TEXT," + // 1: CountryEng
                "\"COUNTRY_TC\" TEXT," + // 2: CountryTC
                "\"COUNTRY_SC\" TEXT," + // 3: CountrySC
                "\"SORT_TC\" TEXT," + // 4: SortTC
                "\"SORT_SC\" TEXT," + // 5: SortSC
                "\"SORT_EN\" TEXT," + // 6: SortEN
                "\"CREATED_AT\" TEXT," + // 7: createdAt
                "\"UPDATED_AT\" TEXT);"); // 8: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNTRY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Country entity) {
        stmt.clearBindings();
 
        String CountryID = entity.getCountryID();
        if (CountryID != null) {
            stmt.bindString(1, CountryID);
        }
 
        String CountryEng = entity.getCountryEng();
        if (CountryEng != null) {
            stmt.bindString(2, CountryEng);
        }
 
        String CountryTC = entity.getCountryTC();
        if (CountryTC != null) {
            stmt.bindString(3, CountryTC);
        }
 
        String CountrySC = entity.getCountrySC();
        if (CountrySC != null) {
            stmt.bindString(4, CountrySC);
        }
 
        String SortTC = entity.getSortTC();
        if (SortTC != null) {
            stmt.bindString(5, SortTC);
        }
 
        String SortSC = entity.getSortSC();
        if (SortSC != null) {
            stmt.bindString(6, SortSC);
        }
 
        String SortEN = entity.getSortEN();
        if (SortEN != null) {
            stmt.bindString(7, SortEN);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(8, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(9, updatedAt);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Country readEntity(Cursor cursor, int offset) {
        Country entity = new Country( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CountryID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CountryEng
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CountryTC
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CountrySC
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SortTC
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SortSC
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // SortEN
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createdAt
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Country entity, int offset) {
        entity.setCountryID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCountryEng(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountryTC(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCountrySC(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSortTC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSortSC(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSortEN(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreatedAt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdatedAt(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Country entity, long rowId) {
        return entity.getCountryID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Country entity) {
        if(entity != null) {
            return entity.getCountryID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
