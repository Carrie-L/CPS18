package com.adsale.ChinaPlas.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "INDUSTRY".
 * <p>
 * CREATE TABLE  Industry (
 * CatalogProductSubID TEXT PRIMARY KEY NOT NULL ,
 * CatEng TEXT,
 * CatTC TEXT,
 * CatSC TEXT,
 * TCStroke INTEGER,
 * SCPY TEXT,
 * SortEN TEXT,
 * IsDelete INTEGER,
 * createdAt TEXT,
 * updatedAt TEXT);
 */
public class IndustryDao extends AbstractDao<Industry, String> {

    public static final String TABLENAME = "Industry";

    /**
     * Properties of entity Industry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CatalogProductSubID = new Property(0, String.class, "CatalogProductSubID", true, "CatalogProductSubID");
        public final static Property CatEng = new Property(1, String.class, "CatEng", false, "CatEng");
        public final static Property CatTC = new Property(2, String.class, "CatTC", false, "CatTC");
        public final static Property CatSC = new Property(3, String.class, "CatSC", false, "CatSC");
        public final static Property TCStroke = new Property(4, Integer.class, "TCStroke", false, "TCStroke");
        public final static Property SCPY = new Property(5, String.class, "SCPY", false, "SCPY");
        public final static Property SortEN = new Property(6, String.class, "SortEN", false, "SortEN");
        public final static Property IsDelete = new Property(7, Boolean.class, "IsDelete", false, "IsDelete");
        public final static Property CreatedAt = new Property(8, String.class, "createdAt", false, "createdAt");
        public final static Property UpdatedAt = new Property(9, String.class, "updatedAt", false, "updatedAt");
    }

    ;


    public IndustryDao(DaoConfig config) {
        super(config);
    }

    public IndustryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"Industry\" (" + //
                "\"CatalogProductSubID\" TEXT PRIMARY KEY NOT NULL ," + // 0: CatalogProductSubID
                "\"CatEng\" TEXT," + // 1: CatEng
                "\"CatTC\" TEXT," + // 2: CatTC
                "\"CatSC\" TEXT," + // 3: CatSC
                "\"TCStroke\" INTEGER," + // 4: TCStroke
                "\"SCPY\" TEXT," + // 5: SCPY
                "\"IsSelected\" INTEGER," + // 6: IsSelected
                "\"SortEN\" TEXT," + // 6: SortEN
                "\"IsDelete\" INTEGER," + // 7: IsDelete
                "\"createdAt\" TEXT," + // 8: createdAt
                "\"updatedAt\" TEXT);"); // 9: updatedAt
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INDUSTRY\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Industry entity) {
        stmt.clearBindings();

        String CatalogProductSubID = entity.getCatalogProductSubID();
        if (CatalogProductSubID != null) {
            stmt.bindString(1, CatalogProductSubID);
        }

        String CatEng = entity.getCatEng();
        if (CatEng != null) {
            stmt.bindString(2, CatEng);
        }

        String CatTC = entity.getCatTC();
        if (CatTC != null) {
            stmt.bindString(3, CatTC);
        }

        String CatSC = entity.getCatSC();
        if (CatSC != null) {
            stmt.bindString(4, CatSC);
        }

        Integer TCStroke = entity.getTCStroke();
        if (TCStroke != null) {
            stmt.bindLong(5, TCStroke);
        }

        String SCPY = entity.getSCPY();
        if (SCPY != null) {
            stmt.bindString(6, SCPY);
        }

        String SortEN = entity.getSortEN();
        if (SortEN != null) {
            stmt.bindString(7, SortEN);
        }

        Boolean IsDelete = entity.getIsDelete();
        if (IsDelete != null) {
            stmt.bindLong(8, IsDelete ? 1L : 0L);
        }

        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(9, createdAt);
        }

        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(10, updatedAt);
        }

    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Industry readEntity(Cursor cursor, int offset) {
        Industry entity = new Industry( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CatalogProductSubID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CatEng
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CatTC
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CatSC
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // TCStroke
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SCPY
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6),// EN_SORT
                cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // IsDelete
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createdAt
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // updatedAt
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Industry entity, int offset) {
        entity.setCatalogProductSubID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCatEng(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCatTC(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCatSC(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTCStroke(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSCPY(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSortEN(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsDelete(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setCreatedAt(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdatedAt(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(Industry entity, long rowId) {
        return entity.getCatalogProductSubID();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(Industry entity) {
        if (entity != null) {
            return entity.getCatalogProductSubID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
